// index.js ‚Äî —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è: –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏ + –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π —Ä–µ–∂–∏–º
document.addEventListener('DOMContentLoaded', () => {
  const micBtn = document.getElementById('micBtn');
  const micIcon = document.getElementById('micIcon');
  const sphere = document.getElementById('sphere');

  const micOnSVG = "icon/mic-mute.svg";
  const micOffSVG = "icon/mic.svg";

  // –∞—É–¥–∏–æ –∏ –∞–Ω–∞–ª–∏–∑
  let audioCtx = null;
  let analyser = null;
  let dataArray = null;
  let source = null;
  let mediaStream = null;

  // –∑–∞–ø–∏—Å—å
  let mediaRecorder = null;
  let chunks = [];

  // —Å–æ—Å—Ç–æ—è–Ω–∏—è
  let listening = false;      // –ª–æ–≥–∏—á–µ—Å–∫–æ–µ: —Å–ª—É—à–∞–µ–º –ª–∏ –º—ã (–≤–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º)
  let recording = false;      // –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∏–¥–µ—Ç –∑–∞–ø–∏—Å—å (MediaRecorder)
  let thinking = false;       // –ò–ò –¥—É–º–∞–µ—Ç / –∂–¥—ë–º –æ—Ç–≤–µ—Ç–∞
  let currentAudio = null;    // –æ–±—ä–µ–∫—Ç Audio –¥–ª—è TTS
  let silenceTimer = null;    // —Ç–∞–π–º–µ—Ä —Ç–∏—à–∏–Ω—ã –¥–ª—è –∞–≤—Ç–æ-—Å—Ç–æ–ø–∞ –∑–∞–ø–∏—Å–∏
  let preventImmediate = 0;   // –∑–∞—â–∏—Ç–∞ –æ—Ç –º–≥–Ω–æ–≤–µ–Ω–Ω—ã—Ö –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π

  // –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–º–æ–∂–µ—à—å –ø–æ–¥–ø—Ä–∞–≤–∏—Ç—å)
  const BASE_SIZE = parseInt(window.getComputedStyle(sphere).width) || 80;
  const QUIET_THRESHOLD = 12;     // –ø–æ—Ä–æ–≥ –¥–ª—è avgVolume (Uint8) ‚Äî —Ç–∏—à–µ —ç—Ç–æ–≥–æ —Å—á–∏—Ç–∞–µ—Ç—Å—è –ø–∞—É–∑–æ–π
  const QUIET_DURATION = 800;     // –º—Å –º–æ–ª—á–∞–Ω–∏—è –¥–æ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–ø–∏—Å–∏
  const RECORD_AFTER_PAUSE_MS = 1300; // —Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –ø–æ—Å–ª–µ –ø–∞—É–∑—ã (–∫—É—Å–æ–∫ –¥–ª—è STT)
  const MIN_STT_CHARS = 1;        // –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞, —á—Ç–æ–±—ã –ø–æ—Å—ã–ª–∞—Ç—å –≤ –ò–ò

  // userId
  if (!localStorage.getItem("userId")) {
    localStorage.setItem("userId", crypto.randomUUID());
  }
  const userId = localStorage.getItem("userId");

  // === UI: –∫–Ω–æ–ø–∫–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ ===
  micBtn.addEventListener('click', async () => {
    if (listening) {
      // –≤—ã–∫–ª—é—á–∞–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é
      await stopAllListening(true);
    } else {
      // –≤–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
      await startAllListening();
    }
  });

  // === —Å—Ç–∞—Ä—Ç –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è: –æ—Ç–∫—Ä—ã–≤–∞–µ–º –º–∏–∫—Ä–æ—Ñ–æ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∏ —Å—Ç–∞—Ä—Ç –∑–∞–ø–∏—Å–∏ ===
  async function startAllListening() {
    try {
      // –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –ø–æ—Ç–æ–∫ ‚Äî –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ
      if (!mediaStream) {
        mediaStream = await navigator.mediaDevices.getUserMedia({ audio: true, video: false });
      }

      if (!audioCtx) audioCtx = new (window.AudioContext || window.webkitAudioContext)();
      if (audioCtx.state === 'suspended') await audioCtx.resume();

      // source/analyser
      source = audioCtx.createMediaStreamSource(mediaStream);
      analyser = audioCtx.createAnalyser();
      analyser.fftSize = 256;
      dataArray = new Uint8Array(analyser.frequencyBinCount);
      source.connect(analyser);

      listening = true;
      micIcon.src = micOnSVG;
      sphere.classList.add('listening');

      // –∑–∞–ø—É—Å–∫–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é/VAD
      monitorAudio();

      // –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–∏—Å—å (MediaRecorder) ‚Äî –¥–µ—Ä–∂–∏–º –æ—Ç–∫—Ä—ã—Ç–æ–π –∑–∞–ø–∏—Å—å, –±—É–¥–µ–º –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –Ω–∞ –ø–∞—É–∑—É
      startRecorder();

      console.log("üé§ Listening started");
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É:", err);
    }
  }

  // === stop: –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤—ã–∫–ª—é—á–∞–µ–º –º–∏–∫—Ä–æ—Ñ–æ–Ω –∏ –≤—Å–µ —Ç–∞–π–º–µ—Ä—ã ===
  async function stopAllListening(stopStream = false) {
  // –æ—Å—Ç–∞–Ω–æ–≤–∏–º –∑–∞–ø–∏—Å—å –µ—Å–ª–∏ –∏–¥—ë—Ç
  stopRecorder();

  // –æ—Å—Ç–∞–Ω–æ–≤–∏–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é (listening=false)
  listening = false;
  sphere.classList.remove('listening');
  micIcon.src = micOffSVG;
  resetSphere();

  // –µ—Å–ª–∏ –ò–ò –≥–æ–≤–æ—Ä–∏—Ç ‚Äî –æ—Å—Ç–∞–Ω–æ–≤–∏–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
  if (currentAudio) {
    currentAudio.pause();
    currentAudio = null;
  }

  // –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å tracks –µ—Å–ª–∏ –Ω—É–∂–Ω–æ (–ø—Ä–∏ –ø–æ–ª–Ω–æ–º –≤—ã–∫–ª—é—á–µ–Ω–∏–∏)
  if (stopStream && mediaStream) {
    mediaStream.getTracks().forEach(t => t.stop());
    mediaStream = null;
  }

  console.log("üîá Listening stopped");
}

  // === Recorder ===
  function startRecorder() {
    if (!mediaStream) return;
    // –µ—Å–ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
    if (mediaRecorder && (mediaRecorder.state === 'recording' || mediaRecorder.state === 'paused')) return;

    chunks = [];
    // –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π MIME: webm opus ‚Äî —Å–µ—Ä–≤–µ—Ä –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç
    let mime = 'audio/webm;codecs=opus';
    if (!MediaRecorder.isTypeSupported(mime)) {
      mime = 'audio/webm';
      if (!MediaRecorder.isTypeSupported(mime)) mime = '';
    }

    try {
      mediaRecorder = new MediaRecorder(mediaStream, mime ? { mimeType: mime } : undefined);
    } catch (e) {
      // fallback
      mediaRecorder = new MediaRecorder(mediaStream);
    }

    mediaRecorder.ondataavailable = e => {
      if (e.data && e.data.size > 0) chunks.push(e.data);
    };

    mediaRecorder.onstop = async () => {
      recording = false;
      // –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö ‚Äî –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º —Å–ª—É—à–∞–Ω–∏–µ
      if (chunks.length === 0) {
        if (!thinking && listening) startRecorder(); // –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏–º –∑–∞–ø–∏—Å—å
        return;
      }

      const blob = new Blob(chunks, { type: chunks[0].type || 'audio/webm' });
      // –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º blob –Ω–∞ —Å–µ—Ä–≤–µ—Ä STT
      await sendBlobToSTT(blob);
      chunks = [];
    };

    try {
      mediaRecorder.start();
      recording = true;
      // console.log('Recorder started', mediaRecorder.mimeType);
    } catch (err) {
      console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ç–∞—Ä—Ç–æ–≤–∞—Ç—å MediaRecorder:', err);
    }
  }

  function stopRecorder() {
    if (mediaRecorder && mediaRecorder.state === 'recording') {
      try {
        mediaRecorder.stop();
      } catch (e) { /* ignore */ }
    }
    recording = false;
    if (silenceTimer) { clearTimeout(silenceTimer); silenceTimer = null; }
  }

// === –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∏ VAD ===
function monitorAudio() {
  if (!listening || !analyser) return;
  requestAnimationFrame(monitorAudio);

  analyser.getByteFrequencyData(dataArray);
  const avg = dataArray.reduce((a, b) => a + b, 0) / dataArray.length;

  // üí° –Ω–µ –º–µ–Ω—è–µ–º —Ü–≤–µ—Ç/—Ä–∞–∑–º–µ—Ä, –µ—Å–ª–∏ —Å–µ–π—á–∞—Å –Ω–µ–π—Ä–æ—Å–µ—Ç—å –¥—É–º–∞–µ—Ç
  if (!thinking && (!currentAudio || currentAudio.paused)) {
    const maxSize = BASE_SIZE * 1.5;
    const size = Math.min(maxSize, BASE_SIZE + avg / 2);
    sphere.style.width = size + 'px';
    sphere.style.height = size + 'px';

    const lightness = Math.min(70, 50 + avg / 3);
    sphere.style.backgroundColor = `hsl(120,70%,${lightness}%)`; // –∑–µ–ª—ë–Ω–∞—è –≥–∞–º–º–∞
    sphere.style.boxShadow = `0 0 ${avg / 2}px hsl(120,70%,${lightness}%)`;
  }

  // VAD —Ç–∞–π–º–µ—Ä –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–ø–∏—Å–∏...
  if (avg < QUIET_THRESHOLD) {
    if (!silenceTimer && recording && !thinking) {
      silenceTimer = setTimeout(() => {
        silenceTimer = null;
        stopRecorder();
      }, QUIET_DURATION);
    }
  } else {
    if (silenceTimer) {
      clearTimeout(silenceTimer);
      silenceTimer = null;
    }
  }
}


  // === –æ—Ç–ø—Ä–∞–≤–∫–∞ blob –Ω–∞ —Å–µ—Ä–≤–µ—Ä STT –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ ===
  async function sendBlobToSTT(blob) {
    // –∑–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞: –Ω–µ —Å–ª–∞—Ç—å —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ
    const now = Date.now();
    if (preventImmediate && now < preventImmediate) return;
    preventImmediate = now + 600; // –Ω–µ–±–æ–ª—å—à–æ–π –±—É—Ñ–µ—Ä

    thinking = true;
    showThinkingAnimation();

    const form = new FormData();
    // –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º webm/ogg ‚Äî –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –µ—Å—Ç—å ffmpeg-–∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä
    form.append('audio', blob, 'speech.webm');

    try {
      const res = await fetch('/api/stt', { method: 'POST', body: form });
      const data = await res.json();

      // Yandex –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç result –∏–ª–∏ text ‚Äî –ø—Ä–æ–≤–µ—Ä–∏–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª–µ–π
      const recognized = (data.text || data.result || '').trim();

      if (!recognized) {
        // –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç ‚Äî –ø—Ä–æ—Å—Ç–æ —Å–±—Ä–æ—Å–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —Å–Ω–æ–≤–∞ –Ω–∞—á–Ω—ë–º —Å–ª—É—à–∞—Ç—å
        console.log('STT –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –≤–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ');
        thinking = false;
        resetSphere();
        // –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è
        setTimeout(() => {
          if (listening) startRecorder();
        }, 300);
        return;
      }

      console.log('STT —Ä–∞—Å–ø–æ–∑–Ω–∞–ª:', recognized);
      thinking = false;
      // –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ AI
      await sendToAI(recognized);
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ STT:', err);
      thinking = false;
      resetSphere();
      // –≤–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å —á–µ—Ä–µ–∑ –∫–æ—Ä–æ—Ç–∫—É—é –∑–∞–¥–µ—Ä–∂–∫—É
      setTimeout(() => {
        if (listening) startRecorder();
      }, 500);
    }
  }

  // === –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ AI –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ TTS ===
  async function sendToAI(userText) {
    // –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥—É–º–∞–Ω–∏–µ
    thinking = true;
    showThinkingAnimation();

    // –æ—Ç–∫–ª—é—á–∞–µ–º –∑–∞–ø–∏—Å—å/–≤—Ö–æ–¥–Ω–æ–π –∑–≤—É–∫, —á—Ç–æ–±—ã –Ω–µ "—Å–ª—É—à–∞—Ç—å" TTS
    // –Ω–æ –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ—Ç–æ–∫ ‚Äî –ø—Ä–æ—Å—Ç–æ –¥–µ–ª–∞–µ–º tracks.enabled = false
    if (mediaStream) {
      mediaStream.getTracks().forEach(t => t.enabled = false);
    }

    try {
      const response = await fetch('/api/sendMessage', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ userId, message: userText, voice: 'oksana' })
      });
      const data = await response.json();

      thinking = false;
      // –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤ –≤–∏–∑—É–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º "–≥–æ–≤–æ—Ä–∏—Ç" (—Ç–≤–æ–∏ —Ü–≤–µ—Ç–∞: —Å–∞–ª–∞—Ç–æ–≤—ã–π)
      sphere.classList.remove('thinking');
      sphere.style.backgroundColor = 'rgb(26, 255, 144)'; // speaking color from original
      sphere.style.boxShadow = '0 0 25px rgba(26,255,144,0.7)';
      sphere.classList.add('speaking');

      if (data.audio) {
        if (currentAudio) {
          currentAudio.pause();
          currentAudio = null;
        }

        currentAudio = new Audio('data:audio/mp3;base64,' + data.audio);

        // –ö–æ–≥–¥–∞ –ò–ò –≥–æ–≤–æ—Ä–∏—Ç ‚Äî –º—ã —è–≤–Ω–æ –ù–ï —Å–ª—É—à–∞–µ–º (tracks.enabled = false —É–∂–µ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–æ).
        // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º:
        try {
          await currentAudio.play();
        } catch (e) {
          // autoplay –º–æ–∂–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å—Å—è ‚Äî –≤—Å—ë —Ä–∞–≤–Ω–æ –¥–æ–∂–¥—ë–º—Å—è —Å–æ–±—ã—Ç–∏—è ended
          console.warn('Playback start failed (autoplay?)', e);
        }

        currentAudio.onended = () => {
          // –∫–æ–≥–¥–∞ –ò–ò –∑–∞–∫–æ–Ω—á–∏–ª - –≤–µ—Ä–Ω—ë–º –≤—Å—ë –∫–∞–∫ –±—ã–ª–æ –∏ —Å–Ω–æ–≤–∞ –Ω–∞—á–Ω—ë–º —Å–ª—É—à–∞—Ç—å
          currentAudio = null;
          resetSphere();
          // –≤–∫–ª—é—á–∞–µ–º tracks –æ–±—Ä–∞—Ç–Ω–æ
          if (mediaStream) mediaStream.getTracks().forEach(t => t.enabled = true);
          // –Ω–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å—å —Å–Ω–æ–≤–∞
          setTimeout(() => {
            if (listening) startRecorder();
          }, 200);
        };
      } else {
        // –Ω–µ—Ç audio -> –ø—Ä–æ—Å—Ç–æ –≤–µ—Ä–Ω—ë–º —Å–ª—É—à–∞–Ω–∏–µ
        resetSphere();
        if (mediaStream) mediaStream.getTracks().forEach(t => t.enabled = true);
        setTimeout(() => {
          if (listening) startRecorder();
        }, 200);
      }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ sendMessage:', err);
      thinking = false;
      resetSphere();
      if (mediaStream) mediaStream.getTracks().forEach(t => t.enabled = true);
      setTimeout(() => {
        if (listening) startRecorder();
      }, 300);
    }
  }

  // === –∞–Ω–∏–º–∞—Ü–∏—è –º—ã—à–ª–µ–Ω–∏—è (–∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ: –±–∏—Ä—é–∑–æ–≤—ã–π —Å—Ç–∞—Ç–∏—á–Ω—ã–π —Å—Ç–∏–ª—å) ===
  function showThinkingAnimation() {
    sphere.classList.add('thinking');
    sphere.style.backgroundColor = 'rgb(5, 229, 203)'; // –±–∏—Ä—é–∑–æ–≤—ã–π
    sphere.style.boxShadow = '0 0 25px rgba(5, 229, 203,0.7)';
    // –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω—É—é —Ä–µ–∫—É—Ä—Å–∏—é: –æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∏–ª—å ‚Äî –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è vd —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
  }

  // === —Å–±—Ä–æ—Å –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É –≤–∏–¥—É ===
  function resetSphere() {
    sphere.classList.remove('speaking', 'thinking');
    sphere.style.width = BASE_SIZE + 'px';
    sphere.style.height = BASE_SIZE + 'px';
    sphere.style.backgroundColor = 'rgb(17, 250, 83)'; // –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∑–µ–ª—ë–Ω—ã–π
    sphere.style.boxShadow = '0 0 20px rgba(17, 250, 83,0.5)';
  }

  // === –∑–∞–≥—Ä—É–∑–∫–∞ —É—Ä–æ–∫–æ–≤ –∏ –≤–∫–ª–∞–¥–∫–∏ (–∫–∞–∫ —É —Ç–µ–±—è –±—ã–ª–æ) ===
  // —Å–∫–æ–ø–∏—Ä—É–µ–º —Ç–≤–æ—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é –∑–∞–≥—Ä—É–∑–∫–∏ —É—Ä–æ–∫–æ–≤ (—É–ø—Ä–æ—â–µ–Ω–Ω–æ), —á—Ç–æ–±—ã –Ω–µ –ª–æ–º–∞—Ç—å UI
  async function loadLessons() {
    try {
      const res = await fetch('backend/lessons.json');
      const lessons = await res.json();
      const container = document.getElementById('lessonsGrid');
      lessons.forEach(lesson => {
        const card = document.createElement('div');
        card.className = 'lesson-card';
        card.dataset.id = lesson.id;
        card.innerHTML = `
          <div class="lesson-header">
            <img src="${lesson.icon}" class="lesson-icon">
            <h2 class="lesson-title">${lesson.title}</h2>
            <button class="lesson-start">‚ñ∂</button>
          </div>
          <div class="lesson-content">
            <p class="lesson-text">${lesson.text}</p>
            <div class="lesson-images">
              ${lesson.images ? lesson.images.map(img => `<img src="${img}">`).join('') : ''}
            </div>
            ${lesson.type === 'interactive' ? `<div class="lesson-game"></div>` : ''}
            <button class="lesson-pause">‚è∏</button>
          </div>
        `;
        container.appendChild(card);
        // –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∫–Ω–æ–ø–æ–∫ ‚Äî –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –ø–æ–ª–Ω—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é
      });
    } catch (err) {
      console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å lessons.json', err);
    }
  }

  // === –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∫–ª–∞–¥–æ–∫ (—Ç–≤–æ—è –ª–æ–≥–∏–∫–∞) ===
  const tabs = document.querySelectorAll('.menu .tab');
  const pages = document.querySelectorAll('.page');
  tabs.forEach(tab => {
    tab.addEventListener('click', e => {
      e.preventDefault();
      const targetPage = tab.dataset.page;
      tabs.forEach(t => t.classList.remove('active', 'chat-tab', 'avatars-tab', 'learning-tab'));
      tab.classList.add('active');
      if (targetPage === 'home') tab.classList.add('chat-tab');
      if (targetPage === 'avatars') tab.classList.add('avatars-tab');
      if (targetPage === 'learning') tab.classList.add('learning-tab');
      pages.forEach(page => page.id === targetPage ? page.classList.add('active') : page.classList.remove('active'));
    });
  });

  // —Å—Ç–∞—Ä—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —É—Ä–æ–∫–æ–≤
  loadLessons();

  // –µ—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–µ—Ä–µ–∫—Ä—ã—Ç–∞ —Ñ–æ–∫—É—Å–æ–º, —É–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∞—É–¥–∏–æ–∫–æ–Ω—Ç–µ–∫—Å—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –≤–æ–∑–æ–±–Ω–æ–≤–ª—ë–Ω –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∫–ª–∏–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  document.addEventListener('visibilitychange', () => {
    if (!document.hidden && audioCtx && audioCtx.state === 'suspended') audioCtx.resume();
  });
});
